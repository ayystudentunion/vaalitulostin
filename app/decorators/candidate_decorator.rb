class CandidateDecorator < ApplicationDecorator
  decorates :candidate

  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #
  #   Or, optionally enable "lazy helpers" by calling this method:
  #     lazy_helpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #
  #   def created_at
  #     h.content_tag :span, time.strftime("%a %m/%d/%y"),
  #                   :class => 'timestamp'
  #   end

  def csv_header
    csv_attribute_data.map(&:keys).flatten
  end

  def csv_attributes_isolatin
    isolatin_attributes = []

    csv_attributes.each do |attr|
      isolatin_attributes << Iconv.conv('ISO-8859-1', 'utf-8', attr.to_s)
    end

    isolatin_attributes
  end

  def csv_attributes
    csv_attribute_data.map(&:values).flatten
  end

  private

  def csv_attribute_data
    [ "Sukunimi" => lastname,
      "Etunimi" => firstname,
      "Ehdokasnimi" => candidate_name,
      "Hetu" => social_security_number,
      "Ehdokasnumero" => candidate_number,
      "Puhelin" => phone_number,
      "Email" => email,
      "Postiosoite" => address,
      "Postitoimipaikka" => postal_information,
      "Vaaliliiton ID" => electoral_alliance_id,
      "Huomioita" => notes ]
  end
end